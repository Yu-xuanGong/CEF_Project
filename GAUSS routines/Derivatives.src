@ ----------------------------- Derivatives.src -----------------------------

   6 November 2007
   Alfed Maussner

   Contains routines that compute numeric first and second order
   derivatives using central difference formulas.


   CDJac
   CDHesse

----------------------------------------------------------------------------   @


/* CDJac
**
** usage: Jac=CDJac(&f,x0,n)
**
**
** purpose: computes a central difference approximation of the Jacobian
**          matrix of a system of n non-linear functions y_i=f^i(x), where
**          x is a column vector of dimension m.
**
** input:  &f: pointer to the routine that returns the m-vector f(x)
**         x0: m vector x0, the point at which the derivatives are to be evaluated
**         n : the size of the vector f(x)
**
** output: Jac: n by m matrix of parital derivatives
**
** algorithm: based on (A.2.8) in Heer and Maussner, see also Dennis and Schnabel (1983), 
**            Algorithm A5.6.4.
*/

proc(1)=CDJac(&f,x0,n);

  local eps, i, j, m, h, df, f1, f2, x1, x2, temp;
  local f:proc;
  
  m=rows(x0);
  df=zeros(n,m);
  eps=MachEps^(1/3);
  x1=x0;
  x2=x0;
 
  for i (1, m, 1);
     if x0[i]<0;
        h=-eps*maxc(abs(x0[i])|1.0);
     else;
        h=eps*maxc(abs(x0[i])|1.0);
    endif;
    temp=x0[i];
    x1[i]=temp+h;
    x2[i]=temp-h;
        h=x1[i]-temp; @ Trick to increase precision slightly, see Dennis and Schnabel (1983), p. 99 @
    f1=f(x1);
    f2=f(x2);
    for j (1,n,1);    
       df[j,i]=(f1[j]-f2[j])/(2*h);       
    endfor;
    x1[i]=x0[i];
    x2[i]=x0[i];    
 endfor;
 retp(df);

endp;

/* CDHesse
**
** usage Hmat=CDHesse(&f,x0)
**
** purpose: compute approximation of the Hesse matrix of a real valued function
**          y=f(x), where x is a n vector
**
** input:  &f: pointer to the procedure that returns f(x)
**         x0: n vector, the point at which the Hesse matrix is to be computed
**
** output: Hmat: n by n matrix
**
** algorithm: based on the formulas (A.2.10) and (A.2.11) in Heer and Maussner
*/


proc(1)=CDHesse(&f,x0);

 local i, j, n, hmat, h, eps, temp, x1, x2,x3,x4;
 local f:proc;

 n=rows(x0);
 h=zeros(n,1);
 hmat=zeros(n,n);
 eps=MachEps^(1/3);
 for i (1,n,1);
    if x0[i] <0;  h[i]=-maxc(abs(x0[i])|1.)*eps; else; h[i]=maxc(abs(x0[i])|1.0)*eps; endif;
    temp=x0[i]+h[i];
    h[i]=temp-x0[i]; @ the last two steps increase precision slightly, see Dennis and Schnabel (1983), p. 321 for this trick @    
 endfor;

 for i (1,n,1);
     x1=x0;
     x2=x0;
  x1[i]=x1[i]+h[i];
  x2[i]=x2[i]-h[i];
    hmat[i,i]=(f(x1)+f(x2)-2*f(x0))/((h[i]^2));
    for j (i+1,n,1);    
           x1=x0; x1[i]=x1[i]+h[i]; x1[j]=x1[j]+h[j];
           x2=x0; x2[i]=x2[i]-h[i]; x2[j]=x2[j]+h[j];
           x3=x0; x3[i]=x3[i]+h[i]; x3[j]=x3[j]-h[j];
           x4=x0; x4[i]=x4[i]-h[i]; x4[j]=x4[j]-h[j];
           hmat[i,j]=(f(x1)-f(x2)-f(x3)+f(x4))/(4*h[i]*h[j]);
           hmat[j,i]=hmat[i,j];           
    endfor;
 endfor;

retp(hmat);

endp;


    