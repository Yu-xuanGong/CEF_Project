@ ---------------------------- Tools.src ---------------------------

  Alfred Maußner
  20 November 2008
  24 January 2013, last revision, missing procedures included

   MachEps
   GetInt
   MyDate
   GraphSettings
   MarkovAR
   MarkovTP
   
------------------------------------------------------------------- @

@ ------------------------- Definitions --------------------------  @
  struct mstr {string m;};
  struct mstr month;

@ ------------------------- MachEps ------------------------------

  Purpose: Computes the machine epsilon
  Usage: e=MachEps;

  Output: the smallest number e so that (1+e)>1 is true

------------------------------------------------------------------- @

proc(1)=MachEps;

    local eps, i;
        eps=1;
        do while (1+eps)>1;
            eps=eps/2;
        endo;
    retp(2*eps);
endp;


@ --------------------------- GetInt ------------------------------------------

  Purpose: return lower, lb, and upper, lu, bound so that
           p x 100 percent of the values in the vector x lie
           between lb and lu.

  Usage: int=GetInt(x,p);

  Input:  x   := n x 1 vector of data
          p   := scalar between 0,1

  Output: int := 1 x 2 - vector, lu,lu  

--------------------------------------------------------------------------- @
proc(1)=GetInt(x,p);

  local n, i, sx;
  n=rows(x);
  i=round(p*n/2);
 sx=sortc(x,1); 
  
retp(sx[i]~sx[n-i]);

endp;


@ ------------------------------------- MyDate -------------------------------

   Purpose: Returns the current date and time from
            Gauss intrinsic commands and prints it to an open file.
          
            Day Month Year
            Hours:Minutes:Seconds

          

   Usage: MyDate;

--------------------------------------------------------------------------- @

proc(0)=MyDate;

  local t,d,str1,str2;
 
  month=reshape(month,12,1);

  month[1].m="January";
  month[2].m="Feburary";
  month[3].m="March";
  month[4].m="April";
  month[5].m="May";
  month[6].m="June";
  month[7].m="July";
  month[8].m="August";
  month[9].m="September";
  month[10].m="October";
  month[11].m="November";
  month[12].m="December";

  d=date;
  t=time;
  str1=ftos(d[3],"%0*.*lf",2,0) $+ " " $+ month[d[2]].m $+" " $+ ftos(d[1],"%0*.*lf",2,0);
  str2=ftos(t[1],"%*.*lf",2,0)  $+ ":" $+ ftos(t[2],"%0*.*lf",2,0) $+":" $+ ftos(t[3],"%0*.*lf",2,0);
  ?str1;
  ?str2;
retp;

endp;

          
/* GraphSettings: Changes Gauss' default initialization of graphic routines
**
** Usage: GraphSettings;
*/
/*
proc(0)=GraphSettings;

 external matrix  _pltype, _ptitlht, _pnumht,
         _paxht, _pmcolor, _plwidth, _pcsel, _pdate;
 external proc GraphSet;
 GraphSet;
   _pdate="";        @ do not plot date               @
  _pltype=6;         @ solid lines only               @
 _plwidth=4;         @ line width always 4            @
   _paxht=0.15;      @ size of axis labels            @        
  _pnumht=0.15;      @ size of axis numbering         @
 _ptitlht=0.20;      @ size of titles                 @
 _pmcolor={0,        @ color of axis: black           @
           0,        @ color of axis' numbers         @
           0,        @ color of x-axis label          @
           0,        @ color of y-axis label          @
           0,        @ color of z-axis label          @
           0,        @ color of title                 @
           0,        @ color of boxes                 @
           0,        @ color of date and author       @
           15};      @ background color:        white @
   _pcsel={0,        @ color of first line: black     @
           9,        @ color of second line: light blue @
           10,       @ color of third line:  light green @
           12,       @ color of fourth line: light red      @
           13,       @ color of fifth line:  light magenta @
           11,       @ color of sixth line: light cyan @
           6};       @ color of seventh line: brown @
   fonts("Simplex, Simgrma");
          
retp;
endp;           
*/

/* MarkovAR: Approximate AR(1)-Process by Markov chain
**
** Usage: {z,p}=MarkovAR(size,m,rho,sigma)
**
** Input: size:  scalar, the mulitple of the unconditional 
**               standard deviation of the AR(1) process
**               used to define the grid size
**
**           m:  integer, the number of grid points
**
**         rho:  scalar, the autoregressive parameter of the process
**
**       sigma:  scalar, the standard deviation of the innovations
**
** Output:   z:  m x 1 vector the grid approximating the process
**
**           p:  m x m matrix of transition probabilities
*/
   
   
proc(2)=MarkovAR(size,m,rho,sigma);

  local p, zt, i, j, sigmaz, zbar;

  sigmaz=sqrt(sigma^2/(1-rho^2));
  zbar=size*sigmaz;  
  zt=seqa(-zbar,2*zbar/(m-1),m);

  p=zeros(m,m);
  i=1;
  Do until i>m;

   p[i,1]   =cdfn((zt[1]-rho*zt[i]+(zt[2]-zt[1])/2)/sigma); 
   
   j=2;
   do until j>(m-1);
      p[i,j]=cdfn((zt[j]-rho*zt[i]+(zt[j]-zt[j-1])/2)/sigma)-
             cdfn((zt[j]-rho*zt[i]-(zt[j]-zt[j-1])/2)/sigma);
           j=j+1;
   endo;
   p[i,m]=1-sumc(p[i,1:m-1]');
   i=i+1;
endo;
              
retp(zt,p);

endp;

/* MarkovTP: Returns a set of indices that defines a realization
**           of a Markov chain
**
**
** Usage:   x=MarkovTP(nobs,p,i0)
**
** Input:   nobs: integer, the length of the time path
**
**             p: m x m matrix of transition probabilities
**
**            i0: the index of the first realisation
**
** Output:     x: nobs x 1 vector that holds the indices
**                      from a grid of points that
**                      hold the m different realizations of the process
*/

proc(1)=MarkovTP(nobs,p,i0);

   local xt, eps, j, i, i1, pu, po, l, m;
   
   xt=zeros(nobs,1);
   eps=rndu(nobs-1,1);  @ draw a sequence of uniformly distributed numbers @
   m=cols(p);
   xt[1]=i0;
   i=1;
   do until i>(nobs-1);  
   j=xt[i]; 
   if eps[i] <= p[j,1]; xt[i+1]=1; goto skip; endif;
   pu=p[j,1];po=pu;
   l=2;
   do until l>m;
      pu=po;
      po=pu+p[j,l];
      if ((eps[i] > pu) and (eps[i]<=po));  xt[i+1]=l; break; endif;       
      l=l+1;
   endo;
   skip:  
   i=i+1;
endo;      

retp(xt);

endp;
