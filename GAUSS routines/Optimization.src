@ ----------------------------- Optimization.src --------------------------------

   18 January 2008
   Alfred Maussner
   Collection of programs that locate the optimizer of
   an unconstraint optimization problem in one or several variables.

   - Newton1
   - QuasiNewton
   - GradTest
   - QNStep
   - GSS

------------------------------------------------------------------------ @

#include Derivatives.src
#include NLEQ.src


@ ---------------------------------------- Newton1 -----------------------

   18 January 2008
   usage: {x1,crit}=Newton1(&f,x0);

   Input: &f : pointer to the real valued function f(x), x in R.
          x0 : initial value

   Output: x1  : the mimimizer
          crit : =1 if the distance between successive steps is smaller
                    than _Ptol and if abs(f'(x1)) larger than _Ftol.
                 =0 if (f'(x1)) smaller than _Ftol (so that the problem is
                    approximately solved.

   Remarks: Newton1 implements the simple Newton algorithm
            x1=x0 - f'(x0)/f''(x0)).

-------------------------------------------------------------------------- @

proc(2)=Newton1(&f,x0);

    local f1, f2, x1, dx, _Ftol, _Ptol, c1;
    local f:proc;
 
    /* Initialize */
    _Ftol=MachEps^(1/3);
    _Ptol=MachEps^(2/3);
    f1=gradp(&f,x0);
    f2=hessp(&f,x0);
    dx=-f1/f2;
    x1=x0+dx;
    c1=abs(f1);
    do while (c1>_Ftol) or (abs(dx)<_Ptol);
        f1=gradp(&f,x1);
        f2=hessp(&f,x1);
        dx=-f1/f2;
        x1=x1+dx;
        c1=abs(f1);
    endo;

    if c1>_Ftol; retp(x1,1); else; retp(x1,0); endif;

 endp;

@ ----------------------------------------- QuasiNewton ----------------------------------------------------

    Purpose: Find the minimizer of a user supplied function

    Usage: {x1,crit}=QuasiNewton(x0,&f)

    Input:  x0 : n times 1 vector, initial value
            &f : pointer to f, where f must return a scalar

    Output: x1 : n times 1 vector, the found solution
           crit: 5 times 1 vector, crit[1]:=return code: 0: normal termination
                                                         1: function evaluation at x not possible
                                                         2: step2<Mstep, and no further reduction in f possible,
                                   crit[2]:=the maximum absolute value of the scaled gradient at x1
                                   crit[3]:=the maximum relative change of x between the last two iterations
                                   crit[4]:=the value of f at x1
                                   crit[5]:=number of iterations

    Gobals:     _QN_Print    = 1 print to screen, =0 do not print messages to screen, default
                _QN_GradTol  = 1 use defaul value of MachEps^(1/3)
                _QN_ParTol   = MachEps^(2/3) (about 10 good digits in x), default

    
---------------------------------------------------------------------------------------------------------- @

declare matrix _QN_Print    != 0;      @ Do not print messages do screen          @          
declare matrix _QN_GradTol  != 1;      @ use default value for GradTol            @
declare matrix _QN_ParToL   != 1;      @ use default value for ParTol @

proc(2)=QuasiNewton(x0,&f);

    local df1,df2,x1,x2,f1,f2,crit, mStep, step1, step2,dx,dgrad,h,itn,maxit,ptol,gtol,oldt, typf;

    local f:proc;
      

    /* initialize */
    crit=zeros(5,1);

    if _QN_GradTol==1; @ Gradient tolerance @
          gTol=MachEps^(1/3);
    else;
          gTol=_QN_GradTol;
    endif;

    if _QN_ParTol==1; @ Parameter tolerance @         
        ptol =MachEps^(2/3); @ Parameter tolerance used in computation of stepsize @
    else;
        ptol=_QN_ParTol;
    endif;

    h=eye(rows(x0));
    x1=x0;
    maxit=500;
    
    f1=f(x1);
    typf=f1;
    @df1=gradp(&f,x1);@
    df1=CDJac(&f,x1,1);
    crit[2]=GradTest(df1,x1,f1);

    /* Check whether initial value is already a good solution canditate */
    if crit[2]<1.e-3*gTol; 
             crit[1]=0; crit[5]=0; crit[3]=miss(1,1); crit[4]=f1;
             retp(x1,crit);
    endif;    

    /* iterate */
          itn=1;    
      crit[3]=1;

    do while itn<maxit;
       if _QN_Print; 
          locate 1,1;?"QN-Iteration #= " ftos(itn,"*.*lf",5,0);
          locate 2,1;?"gTol   := " ftos(crit[2],"*.*lf",25,14) " < " gTol "j/n " (crit[2]<gTol);
          locate 3,1;?"pTol   := " ftos(crit[3],"*.*lf",25,14);
          locate 4,1;?"f(x)   := " ftos(crit[4],"*.*lf",25,14);
       endif;
       oldt=trapchk(1);
       trap 1,1;
         dx=solpd(-df1',h); 
         if scalerr(dx)==30 or scalerr(dx)==41;
            h=eye(rows(x0));
            dx=solpd(-df1',h);
         endif;
       trap oldt,1;   

       /* Reduce step size,if f cannot be computed at the full Newton step */      
       mStep=MinStep(x1,dx,ones(rows(x1),1),pTol);       
       step1=1;
       do while (scalmiss(f(x1+step1*dx)) and (step1>mStep)); 
          step1=0.75*step1;
       endo;       
       if ((mstep<=1) and (step1<mStep));
          crit[1]=1;
          retp(x1,crit);
       endif;
       dx=step1*dx;       
       step2=QNStep(x1,dx,f1,df1,pTol,&f);

       if _QN_Print;
          locate 5,1; ?"MStep=   " ftos(MStep,"*.*lf",20,15);
          locate 6,1; ?"Step1=   " ftos(step1,"*.*lf",20,15);
          locate 7,1; ?"Step2=   " ftos(step2,"*.*lf",20,15);
       endif;
       dx=step2*dx;
       x2=x1+dx;
       f2=f(x2);
       crit[4]=f2;
       @df2=gradp(&f,x2);@
        df2=CDJac(&f,x2,1);        
        if ismiss(df2); crit[1]=1; retp(x1,crit); endif;

       /* Check for convergence */       
       crit[2]=GradTest(df2,x2,f1);
       crit[3]=ParTest(x2,dx,ones(rows(x2),1));
       if ((crit[2] > gtol) and (step2<mStep));
          crit[1]=2;
          retp(x2,crit);
       endif;
       if crit[2]<gtol;
          crit[1]=0;
          retp(x2,crit);
       endif;                

       /* Update h */
      dgrad=df2-df1;
      h=h-(((h*dx)*(dx'h))/(dx'h*dx))+((dgrad'dgrad)/(dgrad*dx));
      df1=df2;
      x1=x2;
      f1=f2;
      itn=itn+1;
      crit[5]=itn;
 endo;
 retp(x1,crit);

endp;

@ --------------------------------------- GradTest -------------------------------------------------------

    Purpose: Computes the relative gradient (the elasticity of f at x) and returns the
             maximum absolute value. This is one of the stopping criteria suggested
             by Dennis and Schnabel (1983).

    Usage: crit=GradTest(df,x,fx);

    Input: df := n times 1 vector, the gradient of f at x
            x := n times 1 vector, the point at which df is evaluated
           fx := scalar, the value of f at x

    Output: crit := scalar the relative gradient
----------------------------------------------------------------------------------------------------- @

proc(1)=GradTest(df,x,fx);

    local crit, i, n;
    n=rows(x);
    crit=zeros(n,1);
    i=1;
    do until i>n;
       crit[i]=abs(df[i])*maxc(abs(x[i])|1.0);
       crit[i]=crit[i]/maxc(abs(fx)|1.0);
             i=i+1;
    endo;

  retp(maxc(crit));

endp;

@ --------------------------------------------- QNStep ----------------------------------------

 Purpose:  Find the step size s so that the Quasi-Newton algorithm
           always moves in the direction of a (local) minimum of
           f(x)


 Usage:    s=QNStep(x0,dx0,f0,df,pTol,&f);

 Input:    x0 := n times 1 vector, the initial point
           dx0:= n times 1 vector, the Newton direction
           f0 := f(x0)
           df := 1 times n vector, the gradient of f at x_0
         pTol := scalar, parameter convergence criterium
           &f := pointer to the function f

 Output:   s  := admissible stepsize
         
------------------------------------------------------------------------------------------------ @

      
proc(1)=QNStep(x0,dx0,f0,df,pTol,&f);

  local s, x1, s1, s2, smult, smin, smax, f1, f2, amat, bvec, ab, dfdx, nobs, disc;
  local f:proc;


  /* Fixed parameters of the algorithm */
  smult=1.0e-4; smin=0.1; smax=0.5;
  
  /* Initialize */
  s=1.0;
  s1=1.0;
  s2=1.0;
  
  amat=zeros(2,2); bvec=zeros(2,1);   
 dfdx=df*dx0;                        @ df(x0)*dx0                          @
 f1=f(x0+dx0);
 f2=f1;

 /* Try the full Newton step s=1 */
 if f1 <= f0 + smult*dfdx;
    retp(s1);
 else;
    s=-dfdx/(2*(f1-f0-dfdx));
    if s<smin; s=smin; endif;
    if s>smax; s=smax; endif;
    x1=x0+s*dx0;
    f2=f(x1);
 endif;
 s2=s;

 /* Reduce s2 further unless f2 < f0 + s2*smult*dfdx */
 do while (f2 > (f0 + smult*s2*dfdx) );
    amat[1,1]=1/(s2^2);  amat[1,2]=-1/(s1^2); amat[2,1]=-s1/(s2^2); amat[2,2]=s2/(s1^2);
    bvec[1]=f2-s2*dfdx-f0; bvec[2]=f1-s1*dfdx-f0;
    ab=(amat*bvec)/(s2-s1);
    if (ab[1,1] == 0.0);
            s=-dfdx/(2*ab[2,1]);
      else;
          disc=(ab[2,1]^2)-3*ab[1,1]*dfdx;  
          if (disc < 0.0);
             s=s2*smax;
           elseif (ab[2,1] <= 0.0);
             s=(-ab[2,1]+sqrt(disc))/(3*ab[1,1]);
           else;
             s=-dfdx/(ab[2,1]+sqrt(disc));
           endif;
      endif;           
     if s < s2*smin; s=s2*smin; endif;
     if s > s2*smax; s=s2*smax; endif;
     if s<MinStep(x0,s*dx0,ones(rows(x0),1),pTol); retp(s); endif; 

     s1=s2;
     s2=s;
     f1=f2;
     x1=x0+s2*dx0;
     f2=f(x1);

 endo;

 retp(s2);

endp;



@ ---------------------------------- GSS --------------------------------

   Alfred Maussner
   
   usage: x1=GSS(&f,xl,xu);

   Input: &f : pointer to the function f(x)
          xl : scalar, lower bound of the interval in which the maximizer
               lies
          xu : scalar, upper bound of the interval in which the maximizer
               lies.

   Output: x1, the approximate maximizer

------------------------------------------------------------------------- @

proc(1)=GSS(&f,xl,xu);

   local tol, p, q, a, b, c, d, fb, fc,i, f:proc;

  /* Compute the parameters of the problem */
   tol=sqrt(MachEps);
  
   p=(sqrt(5)-1)/2;
   q=1-p;

  /* Compute the initial interval [a,d] and the points b and c
  ** that divide it
 */
   a=xl; d=xu; b=p*a+q*d; c=q*a+p*d;

 /* Compute the function value at b and c */
   fb=f(b); fc=f(c);
   
 /* Iterate so that the inverval gets small and smaller */
   do while abs(d-a)>tol*maxc(1|(abs(a)+abs(c)));
      if fb<fc; /* choose [b,d] as next interval */
         a=b;
         b=c;
        fb=fc;
         c=p*b+q*d;
        fc=f(c);
      else; /* choose [a,c] as next interval */        
         d=c;
         c=b;
        fc=fb;
         b=p*c + q*a;         
         fb=f(b);
      endif;
   endo;

   if fb>fc; retp(b); else; retp(c); endif;

endp;

