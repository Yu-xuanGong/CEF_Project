@ --------------------------------- Integration.src --------------------------

  Alfred Maussner
  17 October 2007

  Routines to perform numeric integration.

  GH_INT4
  GH_INT4_2

----------------------------------------------------------------------------- @



/*  GH_INT4: Gauss-Hermite integration over a one-dimensional 
**            space using four points
**
**   usage: x=GH_INT4(&f,sigma)
**
**  Input:      f, pointer to the function y=f(z), which is to be integrated
**          sigma, scalar, the standard deviation of the normal distribution
**
**      Output: x, value of the integral of y over [-inf,+inf]
**
**  Remark: The integration nodes and weights (are taken from Judd (1998), p. 262)
*/ 


proc(1)=GH_INT4(&f,sigma);

    local i, sum, s, temp, ghw, ghx, f: proc;

	ghx={-1.6506801230,-0.5246476232,0.5246476232,1.6506801230};
	ghw={0.08131283544,0.8049140900,0.8049140900,0.08131283544};

	sum=0.0;	
	s=sqrt(2.0)*sigma;
	for i (1,4,1);
			temp=f(s*ghx[i]);
			if scalmiss(temp); ?"Could not evaluate function! Press any key to continue";wait;retp(0); endif;
			sum=sum+temp*ghw[i];
	endfor;

    retp(sum/sqrt(pi));
	
endp;


/*  GH_INT4_2: Gauss-Hermite integration over a two-dimensional 
**            space using four points
**
**   usage: x=GH_INT4_2(&f,sigma)
**
**  Input:      f, pointer to the function y=f(z), which is to be integrated,
**                 where z is in R^2.
**          sigma, scalar, the standard deviation of the normal distribution
**
**      Output: x, value of the integral of y over [-inf,+inf]
**
**  Remark: The integration nodes and weights (are taken from Judd (1998), p. 262)
*/ 


proc(1)=GH_INT4_2(&f,sigma);

    local i1, i2, sum, s, temp, ghw, ghx, f: proc;

	ghx={-1.6506801230,-0.5246476232,0.5246476232,1.6506801230};
	ghw={0.08131283544,0.8049140900,0.8049140900,0.08131283544};

	sum=0.0;	
	s=sqrt(2.0)*sigma;
	for i1 (1,4,1);
        for i2 (1,4,1);
			temp=f(s*ghx[i1]|s*ghx[i2]);
			if scalmiss(temp); ?"Could not evaluate function! Press any key to continue";wait;retp(0); endif;
			sum=sum+temp*ghw[i1]*ghw[i2];
	    endfor;
    endfor;

    retp(sum/pi);
	
endp;
