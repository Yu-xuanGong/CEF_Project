@ -------------------------------- NLEQ.src ----------------------------- 

   15.10.2006
   Alfred Maussner

   Routines to solve non linear equations

   Fixp2
   Fixp1  
   FixvMN1 (and related procedures)
   FixvMN2 (and related procedures)

-------------------------------------------------------------------------- @

@ ----------------------- Fixp2------------- -----------------------------

  Purpose: Approximate the zero of real valued function f(x) in the
           interval [a,b].

  Usage:  x0=Fixp(&f,a,b);

  Input: &f: Pointer to the procedure that returns  y=f(x).

         a, b, scalars, the lower and upper boundary of the interval.

  Output: x0, the approximate solution.

  Remark: The user has to take care that there is indeed
          a solution in [a,b], i.e. f(a)f(b)<0.

--------------------------------------------------------------------- @

proc(1)=Fixp2(&f,a,b);
    local fa, fp, i, p, dp, f:proc;
    
    fa=f(a);
    for i (1,500,1);
        p=a+(b-a)/2;
        fp=f(p);
        dp=abs((b-a)/2)/abs(p);
        if (abs(fp)<=1.e-11);
             retp(p);
        elseif (dp<1.e-14);
             break;            
        else;
            if fa*fp>0; a=p; fa=fp; else;  b=p; endif;
        endif;
    endfor;
    ?"No solution found after 5000 Iterations";
    retp(-1);
endp;


@ --------------------------------- Fixp1 ------------------------------------

   02.07.1997
   Alfred Maussner

   Purpose: Approximate the zero of f(x). The solution is found
            by the modified Netwon-Rapshon method described in
            Heer and Maussner, 2nd. edition.

   Usage: {x,c}=Fixp1(x0,bounds,&f)

   Input:    x0 := scalar, the initial guess of the solution

                 bounds  := 2 by 1 vector with admissible lower and upper bounds, respecively
                      &f := pointer to the procedure that returns y=f(x).

   Output:   x  := scalar, the approximate solution
             c  := 0, fixp1 was successful, x is an approximate solution
                   1, dx is smaler than the parameter tolerance but f(x) still far from 0,
                   2, the maximum number of iterations was exceeded

------------------------------------------------------------------------------ @

proc (2)=Fixp1(x0,bounds,&f);

   local x1,x2,df,dx,s,ftol,ptol,maxit,i,f: proc;

   ftol=1.e-10;
   ptol=1.e-11;

   maxit=50;

   x1=x0;
   dx=1.0;

   for i (1,MaxIt,1);
        if (abs(f(x1))<ftol); retp(x1,0); endif;
        if (abs(dx)<ptol);        retp(x1,1); endif;
        df=GRADP(&f,x1);
        dx=-f(x1)/df;
        s=1;
        x2=x1+s*dx;
        do while (x2<bounds[1]) or (x2>bounds[2]);
            s=0.5*s;
            x2=x1+s*dx;
        endo;
        x1=x2;
   endfor;

   retp(x1,2);

endp;


/* FixvMN1: Solves a system of non-linear equations using a modified Newton Method
**
** Usage:   {x,crit}=FixVMN1(x0,&F)
**
**  Input:  &F  := Pointer the vector valued function F(x), whose
**                 zero, F(x1)=0, is to be computed. 
**
**          x0  := k times 1 vector of starting values
** 
**
** 
**  Output: x1  := k times 1 vector, the approximate solution to F(x1)=0
**         crit :=         1 vector, where
**                                   crit[1]=0 : normal termination 
**                                          =1 : function evaluation failed,
**                                          =2 : no further decrease in function value possible, 
**                                          =3 : maximum number of iterations exceedes
**                                   crit[2]   : termination criterion: maxc(abs(F(x)))
**                                   crit[3]   : the maximum relative change of x between the last two iterations
**                                   crit[4]   : F(x)'F(x)/2
**                                   crit[5]   : number of iterations
**
**
** Gobals: _MNR_Print=1 (0) do (not) print messages to the screen
**
**         _MNR_Gobal=1 (0) do (not) use line search
**
**         _MNR_LU=1 (0) do (not) use LU factorization to solve for the Newton step
**
**         _MNR_Stop=1 (0) do (not) use the default stopping criterium
**                     of 1.e-7;
**         _MNR_ParTol=1 (0) do (not) use the default parameter convergence criterium
**         _MNR_CDJac=1 (0) do (not) use  CDJac to compute Jacobian
*/

declare matrix _MNR_Print=1;
declare matrix _MNR_Global=1;
declare matrix _MNR_Stop=1;
declare matrix _MNR_ParTol=1;
declare matrix _MNR_CDJac=0;


proc(2)=FixVMN1(x0,&f);

  local x1, x2, dx, df, dg, fx, crit, critold, stopc, step1, step2, mstep, pTol, maxit, typf;
  local f:proc;

  /* Initialize */
    maxit=500;      @ stop after 500 Iterations @
    
   if _MNR_Stop==1;  @ stopping criterium @
       stopc=1e-7;
   else;
       stopc=_MNR_Stop;
   endif;    
   if _MNR_ParTol==1; @ parameter convergence criterium @
      pTol=MachEps^(2/3);
   else;
      pTol=_MNR_ParTol;
   endif;

       x1=x0;
       typf=f(x0);

  /* Start Iterations */
     crit=ones(5,1);
     crit[1]=0;
 critold=2;

  if _MNR_Print; DosWin; cls; endif; @ clear screen if output is printed to the screen @

  do until (crit[5] > maxit);      @ start iterations @
      if _MNR_Print;
         locate 1,2;         
         ?"Step No: " ftos(crit[5],"*.*lf",5,0);
         locate 2,2;
           ?" Convergence criterion: " crit[2];
         if _MNR_Global;
           locate 3,2;
           ?"Minimization criterion: "  crit[4] " decrease in function value? " ftos((crit[4]<critold),"*.*lf",1,0);
         endif;
      endif;
      if _MNR_CDJac;
         df=CDJac(&F,x1,rows(x1));
      else;
         df=gradp(&F,x1);
      endif;
      if ismiss(df); crit[1]=1; retp(x1,crit); endif;
      fx=F(x1);
      if _MNR_Global;  dg=fx'df; endif;
      dx=LSolve(df,-fx); @ use the LU factorization @
      x2=x1+dx;
      step1=1;
      mstep=MinStep(x1,dx,ones(rows(x1),1),pTol);
      do while scalmiss(f(x1+step1*dx));
         step1=0.75*step1;
      endo;
      if _MNR_Print;
       locate 4,2;
       ?"mStep= " mStep;
       locate 5,2;
       ?"Step1= " step1;
      endif;
      if ((mstep<=1) and (step1<mStep));
           crit[1]=2;
           retp(x1,crit);
      endif;
      dx=step1*dx;
      if _MNR_Global;  step2=MNRStep(x1,dx,dg,pTol,&f); else; step2=1; endif;

      if _MNR_Print;
         locate 6,2;
         ?"Step2= " step2;
         if ismiss(step2); crit[1]=1; retp(x1,crit); endif;
      endif;
       x2=x1+step2*dx;
       crit[2]=maxc(abs(F(x2)));       
       crit[3]=ParTest(x1,step2*dx,ones(rows(x1),1));
       if (crit[2]<stopc);
          crit[1]=0;
          retp(x2,crit);
       else;
          if (step1*step2<mStep); 
             crit[1]=2;
             retp(x2,crit);
          endif;
       endif;
       if _MNR_Global;     critold=crit[4];  crit[4]=(F(x2)'F(x2))/2;    endif;
       x1=x2;
      crit[5]=crit[5]+1;
   endo;
   if crit[5] >= maxit; crit[1]=3;  endif;

retp(x1,crit);

endp;

/* FixvMN2: Solves a system of non-linear equations using a modified Newton Method
**
** Usage:   {x,crit}=FixVMN1(x0,bounds,&F)
**
**  Input:  &F  := Pointer the vector valued function F(x), whose
**                 zero, F(x1)=0, is to be computed. 
**
**       bounds := k timex 2 vector of upper and lower bounds on x
**
**          x0  := k times 1 vector of starting values
** 
**
** 
**  Output: x1  := k times 1 vector, the approximate solution to F(x1)=0
**         crit :=         1 vector, where
**                                   crit[1]=0 : normal termination 
**                                          =1 : function evaluation failed,
**                                          =2 : no further decrease in function value possible, 
**                                          =3 : maximum number of iterations exceedes
**                                   crit[2]   : termination criterion: maxc(abs(F(x)))
**                                   crit[3]   : the maximum relative change of x between the last two iterations
**                                   crit[4]   : F(x)'F(x)/2
**                                   crit[5]   : number of iterations
**
**
** Gobals: _MNR_Print=1 (0) do (not) print messages to the screen
**
**         _MNR_Gobal=1 (0) do (not) use line search
**
**         _MNR_LU=1 (0) do (not) use LU factorization to solve for the Newton step
**
**         _MNR_Stop=1 (0) do (not) use the default stopping criterium
**                     of 1.e-7;
**         _MNR_ParTol=1 (0) do (not) use the default parameter convergence criterium
**         _MNR_CDJac=1 (0) do (not) use  CDJac to compute Jacobian
*/

declare matrix _MNR_Print=1;
declare matrix _MNR_Global=1;
declare matrix _MNR_Stop=1;
declare matrix _MNR_ParTol=1;
declare matrix _MNR_CDJac=1;


proc(2)=FixVMN2(x0,bounds,&f);

  local x1, x2, dx, df, dg, fx, crit, critold, stopc, step1, step2, mstep, pTol, maxit, typf;
  local f:proc;

  /* Initialize */
    maxit=500;      @ stop after 500 Iterations @
    
   if _MNR_Stop==1;  @ stopping criterium @
       stopc=1e-7;
   else;
       stopc=_MNR_Stop;
   endif;    
   if _MNR_ParTol==1; @ parameter convergence criterium @
      pTol=MachEps^(2/3);
   else;
      pTol=_MNR_ParTol;
   endif;

       x1=x0;
       typf=f(x0);

  /* Start Iterations */
     crit=ones(5,1);
     crit[1]=0;
 critold=2;

  if _MNR_Print; DosWin; cls; endif; @ clear screen if output is printed to the screen @

  do until (crit[5] > maxit);      @ start iterations @
      if _MNR_Print;
         locate 1,2;         
         ?"Step No: " ftos(crit[5],"*.*lf",5,0);
         locate 2,2;
           ?" Convergence criterion: " crit[2];
         if _MNR_Global;
           locate 3,2;
           ?"Minimization criterion: "  crit[4] " decrease in function value? " ftos((crit[4]<critold),"*.*lf",1,0);
         endif;
      endif;
      if _MNR_CDJac;
         df=CDJac(&F,x1,rows(x1));
      else;
         df=gradp(&F,x1);
      endif;
      if ismiss(df); crit[1]=1; retp(x1,crit); endif;
      fx=F(x1);
      if _MNR_Global;  dg=fx'df; endif;
      dx=LSolve(df,-fx); @ use the LU factorization @
      x2=x1+dx;
      step1=1;
      mstep=MinStep(x1,dx,ones(rows(x1),1),pTol);
      step1=CheckBounds2(x1,dx,bounds); @ scale down by step if array bounds are exceeded @
      if _MNR_Print;
       locate 4,2;
       ?"mStep= " mStep;
       locate 5,2;
       ?"Step1= " step1;
      endif;
      if ((mstep<=1) and (step1<mStep));
           crit[1]=2;
           retp(x1,crit);
      endif;
      dx=step1*dx;
      if _MNR_Global;  step2=MNRStep(x1,dx,dg,pTol,&f); else; step2=1; endif;

      if _MNR_Print;
         locate 6,2;
         ?"Step2= " step2;
         if ismiss(step2); crit[1]=1; retp(x1,crit); endif; 
      endif;
       x2=x1+step2*dx;
       crit[2]=maxc(abs(F(x2)));       
       crit[3]=ParTest(x1,step2*dx,ones(rows(x1),1));
       if (crit[2]<stopc);
          crit[1]=0;
          retp(x2,crit);
       else;
          if (step1*step2<mStep); 
             crit[1]=2;
             retp(x2,crit);
          endif;
       endif;
       if _MNR_Global;     critold=crit[4];  crit[4]=(F(x2)'F(x2))/2;    endif;
       x1=x2;
      crit[5]=crit[5]+1;
   endo;
   if crit[5] >= maxit; crit[1]=3;  endif;

retp(x1,crit);

endp;

/* CheckBounds2:
**
** Purpose:  Finds smallest s so that x+s*dx is within bounds 
**
** Usage:    s=CheckBounds2(x,dx,bounds)
**
** Input:  x  := k times 1 vector, the given value of x0
**        dx  := k times 1 vector, the Newton step from x0 to x1
**     bounds := k times 2 matrix, the first (second) colum store the lower (upper) bounds of x
**
** Output: s  := scalar
*/

proc(1)=CheckBounds2(x,dx,bounds);

  local l1, l2, s1, s2;
 
  l1=(bounds[.,1]-x)./dx; s1=minc(selif(l1,l1.>0));
  l2=(bounds[.,2]-x)./dx; s2=minc(selif(l2,l2.>0));  
  s1=minc(0.98*s1|0.98*s2|1);
  
retp(s1);

endp;


/* LSolve:
**
**  Purpose: Solve a system of linear equations Ax=b using the LU-decomposition
**
**  Usage:  x=LSolve(A,b)
**
**  Input:  A: square matrix of dimension n
**          b: vector of dimension n
**
**  Output: x: vector of dimension n
*/   

proc(1)=LSolve(a,b);

 local r, l, u;
 {l,u}=LU(a); 
retp(LUSol(b,l,u));

endp;


@--------------------------------------- MinStep ----------------------------------------------------

  Purpose: Compute the minimal step size so that x1=x0+mstep*dx=0
           (in terms of the parameter tolerance criterium pTol)

  Usage: mstep=MinStep(x,dx,typx,pTol);

  Input:  x := n times 1 vector
         dx := n times 1 vector, change in x
        typx:= n times 1 vector, typical elements of x          
        pTol:= scalar


  Output: mstep:= scalar

---------------------------------------------------------------------------------------------------   @

proc(1)=MinStep(x,dx,typx,pTol);

   local temp, converge, i, n;

   n=rows(x);
   i=1;
   converge=0;

   do until i>n;

       temp=abs(dx[i])/maxc(abs(x[i])|abs(typx[i]));
       if (temp > converge);
            converge=temp;
       endif;
       i=i+1;

   endo;

   retp(PTol/converge);

endp;


/* MNRStep:
**
** Purpose:  Find the step size s so that the Newton-Raphson algorithm
**           always moves in the direction of a (local) minimum of (1/2)(f(x)'f(x))
**
**
** Usage:    s=MNRStep(x0,dx0,dg,pTol,&f);
**
** Input:    x0 := n times 1 vector, the initial point
**           dx0:= n times 1 vector, the Newton direction
**           dg := 1 times n vector, the gradient of (1/2)(f'f) at x_0
**         pTol := scalar, parameter convergence criterium
**           &f := pointer to the function whose zero x solves the system of equations
**
** Output:   s  := admissible stepsize
*/

      
proc(1)=MNRStep(x0,dx0,dg,pTol,&f);

  local s, x1, s1, s2, smult, smin, smax, tol, g0, g1, g2, amat, bvec, ab, dgdx, disc;
  local f:proc;


  /* Fixed parameters of the algorithm */
  smult=1.0e-4; smin=0.1; smax=0.5;
  
  /* Initialize */
  s1=1.0;
  amat=zeros(2,2); bvec=zeros(2,1);
   g0=(1/2)*(f(x0)'f(x0));
 dgdx=dg*dx0;                        @ dg(x0)*dx0                          @
 g1=(1/2)*(f(x0+dx0)'f(x0+dx0));


 /* Try the full Newton step s=1 */
 if g1 <= g0 + smult*dgdx;
    retp(s1);
 else;
    s=-dgdx/(2*(g1-g0-dgdx));
    if s<smin; s=smin; endif;
    if s>smax; s=smax; endif;
    x1=x0+s*dx0;
    g2=(1/2)*(f(x1)'f(x1));
    if ismiss(g2); retp(g2); endif;
 endif;
 s2=s;

 /* Reduce s2 further unless g2 < g0 + s2*smult*dgdx */
 do while (g2 > (g0 + smult*s2*dgdx) );

    amat[1,1]=1/(s2^2);  amat[1,2]=-1/(s1^2); amat[2,1]=-s1/(s2^2); amat[2,2]=s2/(s1^2);
    bvec[1]=g2-s2*dgdx-g0; bvec[2]=g1-s1*dgdx-g0;
    ab=(amat*bvec)/(s2-s1);

    if (ab[1,1] == 0.0);
            s=-dgdx/(2*ab[2,1]);
      else;
          disc=(ab[2,1]^2)-3*ab[1,1]*dgdx;  
          if (disc < 0.0);
             s=s2*smax;
           elseif (ab[2,1] <= 0.0);
             s=(-ab[2,1]+sqrt(disc))/(3*ab[1,1]);
           else;
             s=-dgdx/(ab[2,1]+sqrt(disc));
           endif;
      endif;               

    if s < s2*smin; s=s2*smin; endif;
    if s > s2*smax; s=s2*smax; endif;

    @tol=sqrt((s*dx0)'(s*dx0))/(1+sqrt(x0'x0));@
    if (s<MinStep(x0,s*dx0,ones(rows(x0),1),pTol)); retp(s); endif;
    @if tol < pTol; retp(s); endif;@
    s1=s2;
    s2=s;
    g1=g2;
    x1=x0+s2*dx0;
    g2=(1/2)*(f(x1)'f(x1));
    if ismiss(g2); return(g2); endif;

 endo;

retp(s2);

endp;
      
@ ----------------------------------- ParTest -------------------------------------------------- 

   Purpose: Compute relative change in x

   Usage:   crit=ParTest(x,dx,typx);

   Input:   x := n times 1 vector
           dx := n times 1 vector, change in x
         typx := n times 1 vector, typical elements of x

   Output: crit := scalar

----------------------------------------------------------------------------------------------- @

 proc(1)=ParTest(x,dx,typx);

   local i, n, crit;

    n=rows(x);
    crit=zeros(n,1);
    i=1;
    do until i>n;
       crit[i]=abs(dx[i])/maxc(abs(x[i])|abs(typx[i]));
             i=i+1;
    endo;

   retp(maxc(crit));

endp;


